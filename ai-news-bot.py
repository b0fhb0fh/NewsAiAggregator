#!/usr/bin/python3

import telebot
from telethon import TelegramClient, events
import requests
import json
import logging
import asyncio
import sys
import os
import time
import signal
import threading
from threading import Event

# –§–ª–∞–≥ –¥–ª—è graceful shutdown
shutdown = False

def signal_handler(sig, frame):
    global shutdown
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º shutdown...")
    shutdown = True

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open("config.json", "r") as config_file:
        config = json.load(config_file)
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    sys.exit(1)
except json.JSONDecodeError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
SUMMARY_CHANNEL_ID = config["SUMMARY_CHANNEL_ID"]
API_ID = config["API_ID"]
API_HASH = config["API_HASH"]
PHONE_NUMBER = config["PHONE_NUMBER"]
OLLAMA_URL = config["OLLAMA_URL"]
OLLAMA_MODEL = config["OLLAMA_MODEL"]
INTEREST_TOPICS = config["INTEREST_TOPICS"]
CHANNELS_TO_MONITOR = config["CHANNELS_TO_MONITOR"]

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
CHECK_INTERVAL = config.get("CHECK_INTERVAL", 300)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300 —Å–µ–∫—É–Ω–¥
LOG_LEVEL = config.get("LOG_LEVEL", "INFO")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: INFO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('session_name', API_ID, API_HASH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–º —Ç–µ–º–∞–º
def check_topic_relevance(text):
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
        prompt = (
            f"–ü—Ä–æ—á–∏—Ç–∞–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–Ω–æ –∫ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º: {', '.join(INTEREST_TOPICS)}. "
            f"–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}\n\n –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ—Å–∏—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä, –æ—Ç–≤–µ—á–∞–π '–ù–µ—Ç'."
        )
        payload = {
            "model": OLLAMA_MODEL,
            "prompt": prompt,
            "stream": False
        }
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: {payload}")
        response = requests.post(OLLAMA_URL, json=payload)
        if response.status_code == 200:
            verdict = response.json()["response"].strip().lower()
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç Ollama: {verdict}")
            return "–¥–∞" in verdict  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ "–¥–∞"
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_topic_relevance: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
async def send_media_to_channel(chat_username, message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        chat_username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ ID —á–∞—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç aiogram
        
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç:
        - –§–æ—Ç–æ
        - –í–∏–¥–µ–æ
        - –î–æ–∫—É–º–µ–Ω—Ç—ã
        - –ê—É–¥–∏–æ
        - –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        - –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        - –°—Ç–∏–∫–µ—Ä—ã
        - –ê–Ω–∏–º–∞—Ü–∏–∏ (GIF)
    """
    try:
        logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ {chat_username}")
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏
        caption = (
            getattr(message, 'caption', None)  # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å caption (–µ—Å–ª–∏ –µ—Å—Ç—å)
            or message.text  # –ò–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            or f"üì∑ –ú–µ–¥–∏–∞ –∏–∑ @{chat_username}"  # –ò–ª–∏ –∑–∞–≥–ª—É—à–∫–∞
        )
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        if message.photo:
            await bot.send_photo(
                chat_id=SUMMARY_CHANNEL_ID,
                photo=message.photo[-1].file_id,
                caption=caption[:1024]  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –ø–æ–¥–ø–∏—Å–∏ –≤ Telegram
            )
            
        elif message.video:
            await bot.send_video(
                chat_id=SUMMARY_CHANNEL_ID,
                video=message.video.file_id,
                caption=caption[:1024]
            )
            
        elif message.document:
            await bot.send_document(
                chat_id=SUMMARY_CHANNEL_ID,
                document=message.document.file_id,
                caption=caption[:1024]
            )
            
        elif message.audio:
            await bot.send_audio(
                chat_id=SUMMARY_CHANNEL_ID,
                audio=message.audio.file_id,
                caption=caption[:1024]
            )
            
        elif message.voice:
            await bot.send_voice(
                chat_id=SUMMARY_CHANNEL_ID,
                voice=message.voice.file_id,
                caption=caption[:1024] if caption else None
            )
            
        elif message.sticker:
            await bot.send_sticker(
                chat_id=SUMMARY_CHANNEL_ID,
                sticker=message.sticker.file_id
            )
            
        elif message.animation:
            await bot.send_animation(
                chat_id=SUMMARY_CHANNEL_ID,
                animation=message.animation.file_id,
                caption=caption[:1024]
            )
            
        elif message.text:
            await bot.send_message(
                chat_id=SUMMARY_CHANNEL_ID,
                text=message.text
            )
            
        logging.info(f"–ö–æ–Ω—Ç–µ–Ω—Ç –∏–∑ {chat_username} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ {chat_username}: {str(e)}")
        raise  # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—à–µ

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
@client.on(events.NewMessage)
async def handle_new_message(event):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ–¥–Ω–æ–≥–æ –∏–∑ –∫–∞–Ω–∞–ª–æ–≤ –≤ —Å–ø–∏—Å–∫–µ
        chat_username = event.chat.username if event.chat and event.chat.username else str(event.chat.id) if event.chat else "unknown"
        if not event.chat:
            logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —á–∞—Ç–∞! Content: {event.text or 'Media'}")
        else:
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_username}.")
        
        if chat_username in CHANNELS_TO_MONITOR:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_username} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–≤–∫–ª—é—á–∞—è –≥–∏–ø–µ—Ä—Å—Å—ã–ª–∫–∏)
            message_text = event.message.text if event.message.text else ""
            logging.info(f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {message_text}")

            # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–º —Ç–µ–º–∞–º
            if message_text:
                logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å.")
                is_relevant = check_topic_relevance(message_text)
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–º —Ç–µ–º–∞–º: {is_relevant}")
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç, —Å—á–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–æ–ª—å–∫–æ –º–µ–¥–∏–∞)
                is_relevant = True
                logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞, —Å—á–∏—Ç–∞–µ—Ç—Å—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–º.")

            if is_relevant:
                # –ï—Å–ª–∏ –µ—Å—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
                if event.message.media:
                    logging.info("–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.")
                    await send_media_to_channel(chat_username, event.message)

                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                if message_text:
                    try:
                        logging.info("–ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                        await bot.send_message(
                            SUMMARY_CHANNEL_ID,
                            message_text,
                            parse_mode="HTML"  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                        )
                        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_username} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            else:
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_username} –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–º–∞–º.")
        else:
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_username} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ handle_new_message: {e}")

async def run_telethon():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ Telethon –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.start(PHONE_NUMBER)
        logging.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        
        # –ñ–¥–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while not shutdown:
            await asyncio.sleep(1)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ Telethon –∫–ª–∏–µ–Ω—Ç–µ: {e}")
    finally:
        await client.disconnect()
        logging.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def run_bot():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
    finally:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telethon –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    telethon_task = asyncio.create_task(run_telethon())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while not shutdown:
            await asyncio.sleep(1)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        telethon_task.cancel()
        try:
            await telethon_task
        except asyncio.CancelledError:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot.stop_polling()
        bot_thread.join(timeout=2)
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        sys.exit(0)
