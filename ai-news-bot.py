#!/usr/bin/python3

import telebot
from telethon import TelegramClient, events
from telethon.tl import types
import io
import requests
import json
import logging
import asyncio
import sys
import os
import time
import signal
import threading
from threading import Event
from io import BytesIO
import asyncio

# –§–ª–∞–≥ –¥–ª—è graceful shutdown
shutdown = False

def signal_handler(sig, frame):
    global shutdown
    logging.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –Ω–∞—á–∏–Ω–∞–µ–º shutdown...")
    shutdown = True

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)


# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open("config.json", "r") as config_file:
        config = json.load(config_file)
except FileNotFoundError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    sys.exit(1)
except json.JSONDecodeError:
    print("–û—à–∏–±–∫–∞: —Ñ–∞–π–ª config.json –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.")
    sys.exit(1)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã)
TELEGRAM_BOT_TOKEN = config["TELEGRAM_BOT_TOKEN"]
SUMMARY_CHANNEL_ID = config["SUMMARY_CHANNEL_ID"]
API_ID = config["API_ID"]
API_HASH = config["API_HASH"]
PHONE_NUMBER = config["PHONE_NUMBER"]
OLLAMA_URL = config["OLLAMA_URL"]
OLLAMA_MODEL = config["OLLAMA_MODEL"]
INTEREST_TOPICS = config["INTEREST_TOPICS"]
CHANNELS_TO_MONITOR = config["CHANNELS_TO_MONITOR"]

# –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
CHECK_INTERVAL = config.get("CHECK_INTERVAL", 300)  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300 —Å–µ–∫—É–Ω–¥
LOG_LEVEL = config.get("LOG_LEVEL", "INFO")  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: INFO

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("bot.log"),
        logging.StreamHandler()  # –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª—å
    ]
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(TELEGRAM_BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telethon –∫–ª–∏–µ–Ω—Ç–∞
client = TelegramClient('session_name', API_ID, API_HASH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ–º—ã–º —Ç–µ–º–∞–º
def check_topic_relevance(text):
    logging.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Ollama
        prompt = (
            f"–ü—Ä–æ—á–∏—Ç–∞–π —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –æ–Ω–æ –∫ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —Ç–µ–º: {', '.join(INTEREST_TOPICS)}. "
            f"–û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.\n\n–°–æ–æ–±—â–µ–Ω–∏–µ: {text}"
        )
        payload = {
            "model": OLLAMA_MODEL,
            "prompt": prompt,
            "stream": False
        }
        logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Ollama: {payload}")
        response = requests.post(OLLAMA_URL, json=payload)
        if response.status_code == 200:
            verdict = response.json()["response"].strip().lower()
            logging.info(f"–û—Ç–≤–µ—Ç –æ—Ç Ollama: {verdict}")
            return "–¥–∞" in verdict  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏ "–¥–∞"
        else:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {response.status_code}")
            return False
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ check_topic_relevance: {e}")
        return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤ –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª
async def send_media_to_channel(chat_username, event):
    """–ù–∞–¥–µ–∂–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏"""
    async def download_media_to_buffer():
        buffer = BytesIO()
        await event.download_media(file=buffer)
        buffer.seek(0)
        return buffer

    def sync_send(buffer, caption, media_type):
        try:
            if media_type == 'photo':
                bot.send_photo(
                    chat_id=SUMMARY_CHANNEL_ID,
                    photo=buffer,
                    caption=caption,
                    parse_mode="HTML"
                )
            elif media_type == 'document':
                bot.send_document(
                    chat_id=SUMMARY_CHANNEL_ID,
                    document=buffer,
                    caption=caption,
                    parse_mode="HTML"
                )
            buffer.close()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
            buffer.close()
            raise

    try:
        message = event.message
        caption = (message.text or f"üì∑ –ú–µ–¥–∏–∞ –∏–∑ @{chat_username}")

        if message.media:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞ –≤ –ø–∞–º—è—Ç—å
            buffer = await download_media_to_buffer()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞
            if isinstance(message.media, types.MessageMediaPhoto):
                await asyncio.to_thread(sync_send, buffer, caption, 'photo')
            else:
                await asyncio.to_thread(sync_send, buffer, caption, 'document')

        elif message.text:
            await asyncio.to_thread(
                lambda: bot.send_message(
                    chat_id=SUMMARY_CHANNEL_ID,
                    text=caption,
                    parse_mode="HTML"
                )
            )

    except Exception as e:
        logging.error(f"–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", exc_info=True)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤
@client.on(events.NewMessage(chats=CHANNELS_TO_MONITOR))
async def handle_new_message(event):
    try:
        chat = event.chat
        chat_username = chat.username if chat and chat.username else f"id{chat.id}" if chat else "unknown"
        
        logging.info(f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {chat_username}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)
        message_text = event.message.text or ""
        is_relevant = check_topic_relevance(message_text) if message_text else True
        
        if is_relevant:
            await send_media_to_channel(chat_username, event)  # –ü–µ—Ä–µ–¥–∞–µ–º event, –∞ –Ω–µ message
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", exc_info=True)

async def run_telethon():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ Telethon –∫–ª–∏–µ–Ω—Ç–∞...")
        await client.start(PHONE_NUMBER)
        logging.info("Telethon –∫–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")
        
        # –ñ–¥–µ–º —Ñ–ª–∞–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        while not shutdown:
            await asyncio.sleep(1)
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ Telethon –∫–ª–∏–µ–Ω—Ç–µ: {e}")
    finally:
        await client.disconnect()
        logging.info("Telethon –∫–ª–∏–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

def run_bot():
    try:
        logging.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        bot.polling(none_stop=True, interval=1)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
    finally:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telethon –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    telethon_task = asyncio.create_task(run_telethon())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=run_bot)
    bot_thread.daemon = True
    bot_thread.start()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    try:
        while not shutdown:
            await asyncio.sleep(1)
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á–∏
        telethon_task.cancel()
        try:
            await telethon_task
        except asyncio.CancelledError:
            pass
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
        bot.stop_polling()
        bot_thread.join(timeout=2)
        logging.info("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        sys.exit(0)